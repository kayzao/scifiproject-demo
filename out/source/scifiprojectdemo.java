/* autogenerated by Processing revision 1282 on 2023-01-18 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class scifiprojectdemo extends PApplet {

HashMap<Character, Boolean> keys = new HashMap<Character, Boolean>();
Player player = new Player();

World world; 

PVector vel;

final float accel = 20;
final float maxVel = 30;

boolean interact = false;

final float friction = 0.7f;

 public void setup(){
    keys.put('w', false);
    keys.put('a', false);
    keys.put('s', false);
    keys.put('d', false);
    keys.put(' ', false);
    /* size commented out by preprocessor */;
    vel = new PVector(0, 0);

    PImage level = loadImage("bigimage.jpeg");
    world = new World(level);
    world.addWall(100, 100, 2000, 100);
    world.addWall(100, 100, 100, 1000);
    world.addWall(100, 1000, 2000, 100);
    world.addWall(2000, 100, 100, 500);
}

 public void draw(){
    background(0);
    println(player.x + " " + player.y + " " + width / 2); 
    if(!interact){
        if(keys.get('w')){
        vel.y -= accel;
        }
        if(keys.get('a')){
            vel.x -= accel;
        }
        if(keys.get('s')){
            vel.y += accel;
        }
        if(keys.get('d')){
            vel.x += accel;
        }
        vel.limit(maxVel);
        vel.mult(friction);
    }
    
    
    world.updatePos();
    world.display();
    player.display();
    for(int i = 0; i < world.walls.size(); i++){
        Wall curr = world.walls.get(i);
        //left side
        
        if(curr.x > player.x - player.rad && curr.x < player.x + player.rad && curr.y > player.y - player.rad && curr.y < player.y + player.rad){
            if(curr.x > player.x){
                world.x = curr.x - player.rad;
            }else{
                world.x = curr.x + player.rad;
            }
            vel.x = 0;
        }
    }

    text("velx: " + round(vel.x * 100) / 100 + "             vely: " + round(vel.y * 100) / 100, 10, 10);
}
 public void keyPressed(){
    keys.put(key, true);
}
 public void keyReleased(){
    keys.put(key, false);
}
class Player{
    int rad = 50;
    final int x = 360;
    final int y = 240;
    Player(){
        
    }
  
     public void display(){
        fill(255);
        strokeWeight(0);
        circle(x, y, rad);
    }
  
}
class Wall{
    int x, y, w, h;
    int fill;
    Wall(int x, int y, int w, int h){
        this(x, y, w, h, color(150));
    }
    Wall(int x, int y, int w, int h, int c){
        this.x = x;
        this.y = y;
        this.w = w;
        this.h = h;
        fill = c;
    }
     public void display(int worldx, int worldy){
        strokeWeight(0);
        fill(fill);
        rect(x + worldx, y + worldy, w, h);
    }
}
class World{
    int x, y;
    PImage level;
    ArrayList<Wall> walls = new ArrayList<Wall>();
    World(PImage level){
        this.level = level;
    }
     public void updatePos(){
        x += vel.x;
        y += vel.y;
        
    }
     public void addWall(int x, int y, int w, int h){
        walls.add(new Wall(x, y, w, h));
    }
     public void display(){
        image(level, -x, -y, level.width, level.height);
        for(int i = 0; i < walls.size(); i++){
            walls.get(i).display(-x, -y);
        }
        fill(255);
        text((x + ", " + y), 10, 30);
    }
}


  public void settings() { size(720, 600); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "scifiprojectdemo" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
